diff -ruN linux/arch/arm64/include/asm/kroom.h linux-patched/arch/arm64/include/asm/kroom.h
--- linux/arch/arm64/include/asm/kroom.h	1970-01-01 02:00:00.000000000 +0200
+++ linux-patched/arch/arm64/include/asm/kroom.h	2023-11-08 13:04:31.439842543 +0200
@@ -0,0 +1,7 @@
+#ifndef _ASM_ARM64_KROOM_H
+#ifdef CONFIG_KROOM
+
+#define KROOM_BASE_VA_4 0xff8000000000LU
+
+#endif /* CONFIG_KROOM */
+#endif /* _ASM_ARM64_KROOM_H */
diff -ruN linux/arch/arm64/include/asm/pgtable.h linux-patched/arch/arm64/include/asm/pgtable.h
--- linux/arch/arm64/include/asm/pgtable.h	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/arch/arm64/include/asm/pgtable.h	2023-11-08 13:04:31.439842543 +0200
@@ -733,6 +733,28 @@
 /* use ONLY for statically allocated translation tables */
 #define pud_offset_kimg(dir,addr)	((pud_t *)__phys_to_kimg(pud_offset_phys((dir), (addr))))
 
+#ifdef CONFIG_KROOM
+static inline p4d_t p4d_sample_poison(p4d_t p4d)
+{
+	return __p4d(p4d_val(p4d) & (~1LU));
+}
+
+static inline p4d_t p4d_sample_unpoison(p4d_t p4d)
+{
+	return __p4d(p4d_val(p4d) | (1LU));
+}
+
+static inline int p4d_sample_poisoned(p4d_t p4d)
+{
+	return (p4d_val(p4d) && !(p4d_val(p4d) & 1LU));
+}
+
+static inline int p4d_sample_poisonable(p4d_t p4d)
+{
+	return p4d_val(p4d) & 1LU;
+}
+#endif /* CONFIG_KROOM */
+
 #else
 
 #define p4d_page_paddr(p4d)	({ BUILD_BUG(); 0;})
diff -ruN linux/arch/arm64/include/asm/processor.h linux-patched/arch/arm64/include/asm/processor.h
--- linux/arch/arm64/include/asm/processor.h	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/arch/arm64/include/asm/processor.h	2023-11-08 13:04:31.439842543 +0200
@@ -44,6 +44,10 @@
 #include <asm/spectre.h>
 #include <asm/types.h>
 
+#ifdef CONFIG_KROOM
+#include <asm/kroom.h>
+#endif // CONFIG_KROOM
+
 /*
  * TASK_SIZE - the maximum size of a user space task.
  * TASK_UNMAPPED_BASE - the lower boundary of the mmap VM area.
@@ -75,10 +79,18 @@
 #endif /* CONFIG_COMPAT */
 
 #ifdef CONFIG_ARM64_FORCE_52BIT
+#ifdef CONFIG_KROOM
+#define STACK_TOP_MAX		KROOM_BASE_VA_4
+#else
 #define STACK_TOP_MAX		TASK_SIZE_64
+#endif /* CONFIG KROOM */
 #define TASK_UNMAPPED_BASE	(PAGE_ALIGN(TASK_SIZE / 4))
 #else
+#ifdef CONFIG_KROOM
+#define STACK_TOP_MAX		KROOM_BASE_VA_4
+#else
 #define STACK_TOP_MAX		DEFAULT_MAP_WINDOW_64
+#endif /* CONFIG KROOM */
 #define TASK_UNMAPPED_BASE	(PAGE_ALIGN(DEFAULT_MAP_WINDOW / 4))
 #endif /* CONFIG_ARM64_FORCE_52BIT */
 
diff -ruN linux/arch/x86/include/asm/kroom.h linux-patched/arch/x86/include/asm/kroom.h
--- linux/arch/x86/include/asm/kroom.h	1970-01-01 02:00:00.000000000 +0200
+++ linux-patched/arch/x86/include/asm/kroom.h	2023-11-08 13:04:31.439842543 +0200
@@ -0,0 +1,7 @@
+#ifndef _ASM_X86_KROOM_H
+#ifdef CONFIG_KROOM
+
+#define KROOM_BASE_VA_4 0x7f8000000000
+
+#endif /* CONFIG_KROOM */
+#endif /* _ASM_X86_KROOM_H */
diff -ruN linux/arch/x86/include/asm/page_64_types.h linux-patched/arch/x86/include/asm/page_64_types.h
--- linux/arch/x86/include/asm/page_64_types.h	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/arch/x86/include/asm/page_64_types.h	2023-11-08 13:04:31.439842543 +0200
@@ -77,8 +77,15 @@
 #define TASK_SIZE_OF(child)	((test_tsk_thread_flag(child, TIF_ADDR32)) ? \
 					IA32_PAGE_OFFSET : TASK_SIZE_MAX)
 
+#ifdef CONFIG_KROOM
+#define __VIRTUAL_SAMPLED_MIN	(((_AC(1,UL) << (__VIRTUAL_MASK_SHIFT))) - (_AC(1,UL) << (__VIRTUAL_MASK_SHIFT - 8)))
+#define __VIRTUAL_UNSAMPLED_MAX	(__VIRTUAL_SAMPLED_MIN - PAGE_SIZE)
+#define STACK_TOP		((TASK_SIZE_LOW > __VIRTUAL_UNSAMPLED_MAX)?__VIRTUAL_UNSAMPLED_MAX:TASK_SIZE_LOW)
+#define STACK_TOP_MAX		((TASK_SIZE_MAX > __VIRTUAL_UNSAMPLED_MAX)?__VIRTUAL_UNSAMPLED_MAX:TASK_SIZE_MAX)
+#else
 #define STACK_TOP		TASK_SIZE_LOW
 #define STACK_TOP_MAX		TASK_SIZE_MAX
+#endif /* CONFIG_KROOM */
 
 /*
  * In spite of the name, KERNEL_IMAGE_SIZE is a limit on the maximum virtual
diff -ruN linux/arch/x86/include/asm/pgtable.h linux-patched/arch/x86/include/asm/pgtable.h
--- linux/arch/x86/include/asm/pgtable.h	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/arch/x86/include/asm/pgtable.h	2023-11-08 13:04:31.439842543 +0200
@@ -874,6 +874,13 @@
 
 static inline int p4d_present(p4d_t p4d)
 {
+	#ifdef CONFIG_KROOM
+	#if CONFIG_PGTABLE_LEVELS > 4
+	return p4d_flags(p4d) & (_PAGE_PRESENT | _PAGE_USER);
+	#else
+	return p4d_flags(p4d) & (_PAGE_PRESENT | _PAGE_USER);
+	#endif	/* CONFIG_PGTABLE_LEVELS > 4 */
+	#endif /* CONFIG_KROOM */
 	return p4d_flags(p4d) & _PAGE_PRESENT;
 }
 
@@ -897,6 +904,28 @@
 
 	return (p4d_flags(p4d) & ~ignore_flags) != 0;
 }
+
+#ifdef CONFIG_KROOM
+static inline p4d_t p4d_sample_poison(p4d_t p4d)
+{
+	return native_make_p4d(native_p4d_val(p4d) & (~_PAGE_PRESENT));
+}
+
+static inline p4d_t p4d_sample_unpoison(p4d_t p4d)
+{
+	return native_make_p4d(native_p4d_val(p4d) | _PAGE_PRESENT);
+}
+
+static inline int p4d_sample_poisoned(p4d_t p4d)
+{
+	return ((p4d_flags(p4d) & (_PAGE_PRESENT | _PAGE_USER)) == _PAGE_USER);
+}
+
+static inline int p4d_sample_poisonable(p4d_t p4d)
+{
+	return ((p4d_flags(p4d) & (_PAGE_PRESENT | _PAGE_USER)) == (_PAGE_PRESENT | _PAGE_USER));
+}
+#endif /* CONFIG_KROOM */
 #endif  /* CONFIG_PGTABLE_LEVELS > 3 */
 
 static inline unsigned long p4d_index(unsigned long address)
diff -ruN linux/arch/x86/kernel/sys_x86_64.c linux-patched/arch/x86/kernel/sys_x86_64.c
--- linux/arch/x86/kernel/sys_x86_64.c	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/arch/x86/kernel/sys_x86_64.c	2023-11-08 13:04:31.439842543 +0200
@@ -111,6 +111,22 @@
 		}
 		return;
 	}
+	
+	#ifdef CONFIG_KROOM
+	if (!in_32bit_syscall()) {
+		if(flags & MAP_SAMPLED) {
+			*begin = __VIRTUAL_SAMPLED_MIN;
+			*end = task_size_64bit(1);
+		}else{
+			*begin	= get_mmap_base(1);
+			*end = task_size_64bit(addr > DEFAULT_MAP_WINDOW);
+			if(*end > __VIRTUAL_UNSAMPLED_MAX){
+				*end = __VIRTUAL_UNSAMPLED_MAX;
+			}
+		}
+		return;
+	}
+	#endif /* CONFIG_KROOM */
 
 	*begin	= get_mmap_base(1);
 	if (in_32bit_syscall())
@@ -135,6 +151,21 @@
 
 	if (len > end)
 		return -ENOMEM;
+	
+	#ifdef CONFIG_KROOM
+	if (addr) {
+		addr = PAGE_ALIGN(addr);
+		if(flags & MAP_SAMPLED) {
+			if(addr < __VIRTUAL_SAMPLED_MIN){
+				addr = (unsigned long)NULL;
+			}
+		}else{
+			if(addr + len > __VIRTUAL_UNSAMPLED_MAX){
+				addr = (unsigned long)NULL;
+			}
+		}
+	}
+	#endif /* CONFIG_KROOM */
 
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
@@ -182,6 +213,17 @@
 	/* requesting a specific address */
 	if (addr) {
 		addr &= PAGE_MASK;
+		#ifdef CONFIG_KROOM
+		if(flags & MAP_SAMPLED) {
+			if(addr < __VIRTUAL_SAMPLED_MIN){
+				goto get_unmapped_area;
+			}
+		}else{
+			if(addr + len > __VIRTUAL_UNSAMPLED_MAX){
+				goto get_unmapped_area;
+			}
+		}
+		#endif /* CONFIG_KROOM */
 		if (!mmap_address_hint_valid(addr, len))
 			goto get_unmapped_area;
 
@@ -206,8 +248,15 @@
 	if (addr > DEFAULT_MAP_WINDOW && !in_32bit_syscall())
 		info.high_limit += TASK_SIZE_MAX - DEFAULT_MAP_WINDOW;
 
-	info.align_mask = 0;
-	info.align_offset = pgoff << PAGE_SHIFT;
+	#ifdef CONFIG_KROOM
+	if(flags & MAP_SAMPLED) {
+		info.low_limit = __VIRTUAL_SAMPLED_MIN;
+		info.high_limit = task_size_64bit(1);
+	}else if(info.high_limit > __VIRTUAL_UNSAMPLED_MAX){
+		info.high_limit = __VIRTUAL_UNSAMPLED_MAX;
+	}
+	#endif /* CONFIG_KROOM */
+
 	if (filp) {
 		info.align_mask = get_align_mask();
 		info.align_offset += get_align_bits();
diff -ruN linux/include/linux/kroom.h linux-patched/include/linux/kroom.h
--- linux/include/linux/kroom.h	1970-01-01 02:00:00.000000000 +0200
+++ linux-patched/include/linux/kroom.h	2023-11-08 13:04:31.439842543 +0200
@@ -0,0 +1,13 @@
+#ifndef _LINUX_KROOM_H
+#ifdef CONFIG_KROOM
+
+#include <linux/mm_types.h>
+
+struct kroom_data;
+extern bool kroom_enabled;
+
+void kroom_unpoison(struct mm_struct *mm);
+void kroom_report(struct mm_struct *mm, void *addr, void *pc);
+
+#endif /* CONFIG_KROOM */
+#endif /* _LINUX_KROOM_H */
diff -ruN linux/include/linux/mm_types.h linux-patched/include/linux/mm_types.h
--- linux/include/linux/mm_types.h	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/include/linux/mm_types.h	2023-11-08 13:04:31.439842543 +0200
@@ -16,6 +16,9 @@
 #include <linux/workqueue.h>
 #include <linux/seqlock.h>
 
+#include <linux/hrtimer.h>
+#ifdef CONFIG_KROOM
+#endif
 #include <asm/mmu.h>
 
 #ifndef AT_VECTOR_SIZE_ARCH
@@ -582,6 +585,10 @@
 #endif
 	} __randomize_layout;
 
+#ifdef CONFIG_KROOM
+	atomic_long_t kroom_handle;
+#endif
+
 	/*
 	 * The mm_cpumask needs to be at the end of mm_struct, because it
 	 * is dynamically sized based on nr_cpu_ids.
diff -ruN linux/include/uapi/asm-generic/mman.h linux-patched/include/uapi/asm-generic/mman.h
--- linux/include/uapi/asm-generic/mman.h	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/include/uapi/asm-generic/mman.h	2023-11-08 13:04:31.439842543 +0200
@@ -4,6 +4,7 @@
 
 #include <asm-generic/mman-common.h>
 
+#define MAP_SAMPLED 0x80            /* make the mapping available for the profiling sampler */
 #define MAP_GROWSDOWN	0x0100		/* stack-like segment */
 #define MAP_DENYWRITE	0x0800		/* ETXTBSY */
 #define MAP_EXECUTABLE	0x1000		/* mark it as an executable */
diff -ruN linux/kernel/fork.c linux-patched/kernel/fork.c
--- linux/kernel/fork.c	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/kernel/fork.c	2023-11-08 13:08:56.422621380 +0200
@@ -1080,6 +1080,9 @@
 		goto fail_nocontext;
 
 	mm->user_ns = get_user_ns(user_ns);
+#ifdef CONFIG_KROOM
+	atomic_long_set(&mm->kroom_handle, (long)NULL);
+#endif /* CONFIG_KROOM */
 	return mm;
 
 fail_nocontext:
diff -ruN linux/mm/Kconfig linux-patched/mm/Kconfig
--- linux/mm/Kconfig	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/mm/Kconfig	2023-11-08 13:04:31.439842543 +0200
@@ -899,4 +899,25 @@
 
 source "mm/damon/Kconfig"
 
+config KROOM
+	prompt "Pagefault sampling based profiler (KROOM)"
+	def_bool n
+	# Note: only available in 64-bit mode
+	depends on (X86_64 || ARM64) &&  (PGTABLE_LEVELS = 4)
+	help
+	  Enable sample based monitoring of memory acceses for profiling reasons.
+	  It uses page faults in order to work. Necessary for SHAMBLES.
+
+	  If unsure, say n.
+
+config KROOM_DEBUG
+	prompt "KROOM debugging"
+	def_bool n
+	# Note: only available in 64-bit mode
+	depends on KROOM
+	help
+	  Enable KROOM debugging.
+
+	  If unsure, say n.
+
 endmenu
diff -ruN linux/mm/kroom.c linux-patched/mm/kroom.c
--- linux/mm/kroom.c	1970-01-01 02:00:00.000000000 +0200
+++ linux-patched/mm/kroom.c	2023-11-08 13:04:31.439842543 +0200
@@ -0,0 +1,211 @@
+#include <asm/kroom.h>
+#include <linux/kroom.h>
+#include <linux/hrtimer.h>
+#include <asm/tlbflush.h>
+#include <linux/pgtable.h>
+#include <linux/debugfs.h>
+#include <linux/fs.h>
+#include <linux/mmap_lock.h>
+
+#define TIMER_SEC 0
+#define TIMER_NSEC 100000
+
+static ktime_t kt;
+bool kroom_enabled;
+
+struct kroom_handle{
+	struct mm_struct	*mm;
+	struct hrtimer		timer;
+	struct mutex		lock;
+	struct semaphore	wait_sem;
+	void 				*addr, *pc;
+};
+
+void kroom_poison(struct mm_struct *mm){
+	//struct mmu_gather tlb;
+	//tlb_gather_mmu(&tlb, mm);
+	pgd_t *pgd;
+	p4d_t *p4d;
+	#if CONFIG_PGTABLE_LEVELS > 4
+	if(!pgtable_l5_enabled()){
+		pgd = pgd_offset(mm, KROOM_BASE_VA_4);
+		p4d = p4d_offset(pgd, KROOM_BASE_VA_4);
+	}else{
+		//todo
+	}
+	#else
+	pgd = pgd_offset(mm, KROOM_BASE_VA_4);
+	p4d = p4d_offset(pgd, KROOM_BASE_VA_4);
+	#endif	/* CONFIG_PGTABLE_LEVELS > 4 */
+	if(p4d_sample_poisonable(*p4d)){
+		set_p4d(p4d, p4d_sample_poison(*p4d));
+		flush_tlb_mm(mm);
+	}
+#ifdef CONFIG_KROOM_DEBUG
+        printk(KERN_INFO "Timer hit, p4d=%llx, pgd_index=%ld\n", p4d_val(*p4d), pgd_index(KROOM_BASE_VA_4));
+#endif // CONFIG_KROOM_DEBUG
+	//printk(KERN_INFO "Timer hit\n");
+}
+
+void kroom_unpoison(struct mm_struct *mm){
+	pgd_t *pgd;
+	p4d_t *p4d;
+	#if CONFIG_PGTABLE_LEVELS > 4
+	if(!pgtable_l5_enabled()){
+		pgd = pgd_offset(mm, KROOM_BASE_VA_4);
+		p4d = p4d_offset(pgd, KROOM_BASE_VA_4);
+	}else{
+		//todo
+	}
+	#else
+	pgd = pgd_offset(mm, KROOM_BASE_VA_4);
+	p4d = p4d_offset(pgd, KROOM_BASE_VA_4);
+	#endif	/* CONFIG_PGTABLE_LEVELS > 4 */
+	set_p4d(p4d, p4d_sample_unpoison(*p4d));
+	//printk(KERN_INFO "unpoisoned something\n");
+}
+
+
+static enum hrtimer_restart kroom_timer_hander(struct hrtimer *timer)
+{
+	struct kroom_handle *handle;
+	struct mm_struct *mm;
+	handle = container_of(timer, struct kroom_handle, timer);
+	mm = handle->mm;
+
+	/*I hate doing this, but it is not entirely my fault...*/
+	if(mmap_write_trylock(mm)){
+		kroom_poison(mm);
+		mmap_write_unlock(mm);
+	}
+    hrtimer_forward(timer,timer->base->get_time(),kt);
+    return HRTIMER_RESTART;
+}
+
+int kroom_activate(struct kroom_handle *handle){
+	handle->mm = current->mm;
+	//printk(KERN_INFO "Activating sampler for mmstruct %p\n", handle->mm);
+	if(atomic_long_cmpxchg(&handle->mm->kroom_handle, (long)NULL, (long)handle) != (long)NULL){
+		return -ENOMEM;
+	}
+	mmgrab(handle->mm);
+	//mm->sample_data = (void *)kroom_data_create();
+	mutex_init(&handle->lock);
+	sema_init(&handle->wait_sem, 0);
+	handle->addr = NULL;
+	handle->pc = NULL;
+	hrtimer_init(&handle->timer,CLOCK_MONOTONIC,HRTIMER_MODE_REL_SOFT);
+	handle->timer.function = kroom_timer_hander;
+	hrtimer_start(&handle->timer,kt,HRTIMER_MODE_REL_SOFT);
+	return 0;
+}
+
+void kroom_deactivate(struct kroom_handle *handle){
+	//printk(KERN_INFO "Deactivating sampler for mmstruct %p\n", handle->mm);
+	hrtimer_cancel(&handle->timer);
+	kroom_unpoison(handle->mm);
+	atomic_long_set(&handle->mm->kroom_handle, (long)NULL);
+	mmdrop(handle->mm);
+}
+
+void kroom_report(struct mm_struct *mm, void *addr, void *pc){
+	struct kroom_handle *handle;
+	handle = (struct kroom_handle *)atomic_long_read(&mm->kroom_handle);
+	mutex_lock(&handle->lock);
+
+	/*Hack alert make sure that the any unread old value is discarded*/
+	if(down_trylock(&handle->wait_sem));
+
+	handle->addr = addr;
+	handle->pc = pc;
+	up(&handle->wait_sem);
+	mutex_unlock(&handle->lock);
+}
+
+/*
+ * Debugfs interface
+ */
+
+/*
+ * To user comunication
+ */
+
+static int sample_open(struct inode *node, struct file *filp){
+	struct kroom_handle *handle;
+	int err;
+	if(!kroom_enabled){
+		return -EACCES;
+	}
+	handle = kmalloc(GFP_KERNEL, sizeof(struct kroom_handle));
+	err = kroom_activate(handle);
+	if(err){
+		kfree(handle);
+		return err;
+	}
+	filp->private_data = handle;
+	return 0;
+}
+
+static int sample_release(struct inode *node, struct file *filp){
+	struct kroom_handle *handle;
+	handle = filp->private_data;
+	kroom_deactivate(handle);
+	kfree(handle);
+	return 0;
+}
+
+static ssize_t sample_read(struct file *filp, char __user *buffer, size_t size, loff_t *offset){
+	struct kroom_handle *handle;
+	if(size != 16){
+		return -EINVAL;
+	}
+	handle = filp->private_data;
+
+	/*Fork maybe?*/
+	if(handle->mm != current->mm){
+		return -EPERM;
+	}
+	if(down_interruptible(&handle->wait_sem)){
+		return -ERESTARTSYS;
+	}
+	mutex_lock(&handle->lock);
+
+	/*Hack alert make sure that you do not read a duplicate value*/
+	if(down_trylock(&handle->wait_sem));
+
+	if(copy_to_user(buffer, &handle->addr, 8)){
+		mutex_unlock(&handle->lock);
+		return -EFAULT;
+	}
+	if(copy_to_user(buffer+8, &handle->pc, 8)){
+		mutex_unlock(&handle->lock);
+		return -EFAULT;
+	}
+
+	mutex_unlock(&handle->lock);
+	return 16;
+}
+
+static struct file_operations fops = {
+	.owner			= THIS_MODULE,
+	.open			= sample_open,
+	.release		= sample_release,
+	.read			= sample_read
+};
+
+/*
+ * init
+ */
+static int __init kroom_init(void){
+	static struct dentry *dir = 0;
+
+	printk(KERN_INFO "Initing kroom\n");
+	kt = ktime_set(TIMER_SEC, TIMER_NSEC);
+	dir = debugfs_create_dir("sampler", NULL);
+	debugfs_create_x64("interval_ns", S_IRUGO|S_IWUGO, dir, &kt);
+	debugfs_create_file("samples", S_IRUGO|S_IWUGO, dir, NULL, &fops);
+	debugfs_create_bool("enabled", S_IRUGO|S_IWUGO, dir, &kroom_enabled);
+	return 0;
+}
+
+subsys_initcall(kroom_init);
diff -ruN linux/mm/Makefile linux-patched/mm/Makefile
--- linux/mm/Makefile	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/mm/Makefile	2023-11-08 13:04:31.439842543 +0200
@@ -70,6 +70,7 @@
 	obj-$(CONFIG_ADVISE_SYSCALLS)	+= madvise.o
 endif
 
+obj-$(CONFIG_KROOM) 	+= kroom.o
 obj-$(CONFIG_SWAP)	+= page_io.o swap_state.o swapfile.o swap_slots.o
 obj-$(CONFIG_FRONTSWAP)	+= frontswap.o
 obj-$(CONFIG_ZSWAP)	+= zswap.o
diff -ruN linux/mm/memory.c linux-patched/mm/memory.c
--- linux/mm/memory.c	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/mm/memory.c	2023-11-08 13:04:31.449842649 +0200
@@ -83,6 +83,12 @@
 #include <asm/tlb.h>
 #include <asm/tlbflush.h>
 
+#ifdef CONFIG_KROOM
+#include <asm/kroom.h>
+#include <linux/kroom.h>
+#include <asm/pgtable.h>
+#endif /* CONFIG_KROOM */
+
 #include "pgalloc-track.h"
 #include "internal.h"
 
@@ -4664,6 +4670,18 @@
 	vmf.pud = pud_alloc(mm, p4d, address);
 	if (!vmf.pud)
 		return VM_FAULT_OOM;
+	
+	#ifdef CONFIG_KROOM
+	if(p4d_sample_poisoned(*p4d)){
+		kroom_unpoison(mm);
+		kroom_report(mm, (void *)address, (void *)KSTK_EIP(current));
+		return VM_FAULT_NOPAGE;
+	}
+	#endif /* CONFIG_KROOM */	
+	
+	//if(address >= 0x7f8000000000LLU){
+	//	printk(KERN_INFO "Faulting in addr=0x%lx, pgd_index=0x%lx, pgd=%lx, p4d=%lx, pud=%lx\n", address, pgd_index(address), pgd, p4d, vmf.pud);
+	//}
 retry_pud:
 	if (pud_none(*vmf.pud) && __transparent_hugepage_enabled(vma)) {
 		ret = create_huge_pud(&vmf);
diff -ruN linux/mm/mmap.c linux-patched/mm/mmap.c
--- linux/mm/mmap.c	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/mm/mmap.c	2023-11-08 13:19:33.159303804 +0200
@@ -73,6 +73,11 @@
 int mmap_rnd_compat_bits __read_mostly = CONFIG_ARCH_MMAP_RND_COMPAT_BITS;
 #endif
 
+#ifdef CONFIG_KROOM
+#include <linux/kroom.h>
+#include <asm/kroom.h>
+#endif
+
 static bool ignore_rlimit_data;
 core_param(ignore_rlimit_data, ignore_rlimit_data, bool, 0644);
 
@@ -1477,6 +1482,12 @@
 	if (mlock_future_check(mm, vm_flags, len))
 		return -EAGAIN;
 
+	#ifdef CONFIG_KROOM
+	if((flags & MAP_SAMPLED) && !kroom_enabled){
+		return -EACCES;
+	}
+	#endif
+
 	if (file) {
 		struct inode *inode = file_inode(file);
 		unsigned long flags_mask;
@@ -2135,9 +2146,22 @@
 	struct mm_struct *mm = current->mm;
 	struct vm_area_struct *vma, *prev;
 	struct vm_unmapped_area_info info;
+#ifdef CONFIG_KROOM
+	unsigned long mmap_end = arch_get_mmap_end(addr);
+	unsigned long mmap_start = mmap_min_addr;
+#else
 	const unsigned long mmap_end = arch_get_mmap_end(addr);
+	const unsigned long mmap_start = mmap_min_addr;
+#endif // CONFIG_KROOM
 
-	if (len > mmap_end - mmap_min_addr)
+#ifdef CONFIG_KROOM
+	if(flags & MAP_SAMPLED) {
+		mmap_start = max(mmap_start, KROOM_BASE_VA_4);
+	}else{
+		mmap_end = min(mmap_end, KROOM_BASE_VA_4);
+	}
+#endif // CONFIG_KROOM
+	if (len > mmap_end - mmap_start)
 		return -ENOMEM;
 
 	if (flags & MAP_FIXED)
@@ -2146,7 +2170,7 @@
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
 		vma = find_vma_prev(mm, addr, &prev);
-		if (mmap_end - len >= addr && addr >= mmap_min_addr &&
+		if (mmap_end - len >= addr && addr >= mmap_start &&
 		    (!vma || addr + len <= vm_start_gap(vma)) &&
 		    (!prev || addr >= vm_end_gap(prev)))
 			return addr;
@@ -2154,7 +2178,11 @@
 
 	info.flags = 0;
 	info.length = len;
+	#ifdef CONFIG_KROOM
+	info.low_limit = max(mmap_start, mm->mmap_base);
+	#else
 	info.low_limit = mm->mmap_base;
+	#endif // CONFIG_KROOM
 	info.high_limit = mmap_end;
 	info.align_mask = 0;
 	info.align_offset = 0;
@@ -2175,10 +2203,24 @@
 	struct vm_area_struct *vma, *prev;
 	struct mm_struct *mm = current->mm;
 	struct vm_unmapped_area_info info;
+#ifdef CONFIG_KROOM
+	unsigned long mmap_end = arch_get_mmap_end(addr);
+	unsigned long mmap_start = mmap_min_addr;
+#else
 	const unsigned long mmap_end = arch_get_mmap_end(addr);
+	const unsigned long mmap_start = mmap_min_addr;
+#endif // CONFIG_KROOM
+
+#ifdef CONFIG_KROOM
+	if(flags & MAP_SAMPLED) {
+		mmap_start = max(mmap_start, KROOM_BASE_VA_4);
+	}else{
+		mmap_end = min(mmap_end, KROOM_BASE_VA_4);
+	}
+#endif // CONFIG_KROOM
 
 	/* requested length too big for entire address space */
-	if (len > mmap_end - mmap_min_addr)
+	if (len > mmap_end - mmap_start)
 		return -ENOMEM;
 
 	if (flags & MAP_FIXED)
@@ -2188,7 +2230,7 @@
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
 		vma = find_vma_prev(mm, addr, &prev);
-		if (mmap_end - len >= addr && addr >= mmap_min_addr &&
+		if (mmap_end - len >= addr && addr >= mmap_start &&
 				(!vma || addr + len <= vm_start_gap(vma)) &&
 				(!prev || addr >= vm_end_gap(prev)))
 			return addr;
@@ -2196,8 +2238,8 @@
 
 	info.flags = VM_UNMAPPED_AREA_TOPDOWN;
 	info.length = len;
-	info.low_limit = max(PAGE_SIZE, mmap_min_addr);
-	info.high_limit = arch_get_mmap_base(addr, mm->mmap_base);
+	info.low_limit = max(PAGE_SIZE, mmap_start);
+	info.high_limit = min(arch_get_mmap_base(addr, mm->mmap_base), mmap_end);
 	info.align_mask = 0;
 	info.align_offset = 0;
 	addr = vm_unmapped_area(&info);
@@ -2211,11 +2253,13 @@
 	if (offset_in_page(addr)) {
 		VM_BUG_ON(addr != -ENOMEM);
 		info.flags = 0;
-		info.low_limit = TASK_UNMAPPED_BASE;
+		info.low_limit = max(TASK_UNMAPPED_BASE, mmap_start);
 		info.high_limit = mmap_end;
 		addr = vm_unmapped_area(&info);
 	}
-
+#ifdef CONFIG_KROOM_DEBUG
+	BUG_ON(flags & MAP_SAMPLED ? (addr < KROOM_BASE_VA_4):(addr + len > KROOM_BASE_VA_4));
+#endif // CONFIG_KROOM_DEBUG
 	return addr;
 }
 #endif
@@ -2258,7 +2302,11 @@
 	if (offset_in_page(addr))
 		return -EINVAL;
 
+#ifdef CONFIG_KROOM_DEBUG
+	BUG_ON(flags & MAP_SAMPLED ? (addr < KROOM_BASE_VA_4):(addr + len > KROOM_BASE_VA_4));
+#endif // CONFIG_KROOM_DEBUG
 	error = security_mmap_addr(addr);
+
 	return error ? error : addr;
 }
 
diff -ruN linux/mm/pgtable-generic.c linux-patched/mm/pgtable-generic.c
--- linux/mm/pgtable-generic.c	2022-09-15 12:30:08.000000000 +0300
+++ linux-patched/mm/pgtable-generic.c	2023-11-08 13:04:31.449842649 +0200
@@ -27,6 +27,7 @@
 #ifndef __PAGETABLE_P4D_FOLDED
 void p4d_clear_bad(p4d_t *p4d)
 {
+	dump_stack();
 	p4d_ERROR(*p4d);
 	p4d_clear(p4d);
 }
